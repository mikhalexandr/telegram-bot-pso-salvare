import os
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import emoji

from keyboards import LostKeyboard, ExitKeyboard, SelectionKeyboard, TutorKeyboard
from data import Checking
from config import TelegramConfig
from states import LostStates
from misc import create_form


router = Router()


@router.message(F.text.lower() == emoji.emojize("üôè –ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏!"))
async def help_message_handler(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ", reply_markup=ExitKeyboard.exit_kb())
    await state.set_state(LostStates.load_name)


@router.message(LostStates.load_name, F.text)
async def born_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ")
    await state.set_state(LostStates.load_born)


@router.message(LostStates.load_born, F.text)
async def regions_handler(message: Message, state: FSMContext):
    await state.update_data(born=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–ø–∞–∂–∞")
    await state.set_state(LostStates.load_region)


@router.message(LostStates.load_region, F.text)
async def description_handler(message: Message, state: FSMContext):
    await state.update_data(region=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é-–ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–º")
    await state.set_state(LostStates.load_description)


@router.message(LostStates.load_description, F.text)
async def feature_handler(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ç—ã –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ")
    await state.set_state(LostStates.load_feature)


@router.message(LostStates.load_feature, F.text)
async def spec_feature_handler(message: Message, state: FSMContext):
    await state.update_data(feature=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ")
    await state.set_state(LostStates.load_spec_feature)


@router.message(LostStates.load_spec_feature, F.text)
async def clothes_handler(message: Message, state: FSMContext):
    await state.update_data(spec_feature=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ, –≤–æ —á—Ç–æ –±—ã–ª –æ–¥–µ—Ç –ø—Ä–æ–ø–∞–≤—à–∏–π")
    await state.set_state(LostStates.load_clothes)


@router.message(LostStates.load_clothes, F.text)
async def items_handler(message: Message, state: FSMContext):
    await state.update_data(clothes=message.text)
    await message.answer("–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±—ã–ª–∏ —É –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ –ø—Ä–∏ —Å–µ–±–µ?")
    await state.set_state(LostStates.load_items)


@router.message(LostStates.load_items, F.text)
async def photo_handler(message: Message, state: FSMContext):
    await state.update_data(items=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ")
    await state.set_state(LostStates.load_photo)


@router.message(LostStates.load_photo, F.photo)
async def check_form_handler(message: Message, state: FSMContext):
    await message.bot.download(file=message.photo[-1].file_id,
                               destination=f"assets/temporary/photo{message.photo[-1].file_id}.jpg")
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    ll = await state.get_data()
    photo = create_form(*[ll[key] for key in ll], message.photo[-1].file_id)
    p = await message.answer_photo(photo)
    os.remove(f"assets/temporary/image{message.photo[-1].file_id}.jpg")
    await state.update_data(photo=p.photo[-1].file_id)
    await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=LostKeyboard.yes_or_no_kb())
    await state.set_state(LostStates.confirm)


@router.message(LostStates.confirm, F.text.lower() == emoji.emojize("‚úÖ –¥–∞"))
async def okay_handler(message: Message, state: FSMContext, bot: Bot):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                         reply_markup=SelectionKeyboard.select_action_kb())
    ll = await state.get_data()
    Checking.add_checking(message.from_user.id, *[ll[key] for key in ll])
    await bot.send_photo(TelegramConfig.TUTOR_ID, ll["photo"], reply_markup=TutorKeyboard.inline_finding_kb())
    await state.clear()


@router.message(LostStates.confirm, F.text.lower() == emoji.emojize("‚ùå –Ω–µ—Ç"))
async def repeat_handler(message: Message, state: FSMContext):
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?", reply_markup=LostKeyboard.yes_or_no_kb())
    await state.set_state(LostStates.confirm_restart)


@router.message(LostStates.confirm_restart, F.text.lower() == emoji.emojize("‚ùå –Ω–µ—Ç"))
async def no_handler(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=SelectionKeyboard.select_action_kb())
    await state.clear()


@router.message(LostStates.confirm_restart, F.text.lower() == emoji.emojize("‚úÖ –¥–∞"))
async def yes_handler(message: Message, state: FSMContext):
    await help_message_handler(message, state)
